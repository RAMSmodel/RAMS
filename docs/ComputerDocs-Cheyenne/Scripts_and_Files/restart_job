#!/usr/bin/env bash

##############################################################################################
# Script to automatically restart a RAMS simulation (HISTORY start).
#
# This is useful after starting the first run (RUNTYPE = 'INITIAL'), and you want
# to automatically fire off a new job via a history start (RUNTYPE = 'HISTORY').

Usage="USAGE: $0 <qsub_script> <ramsin_file> <end_rams_file>"

if [ $# != 3 ]
then
  echo "ERROR: must supply exactly three arguments to script"
  echo ""
  echo $Usage
  exit -1
fi

QsubScript=$1
RamsFile=$2
EndRamsFile=$3

echo "***************************************************************"
echo "Attempting to restart RAMS job"
echo "  qsub script: $QsubScript"
echo "  ramsin file: $RamsFile"
echo "  end rams file: $EndRamsFile"
echo ""

RamsFileTemplate="${RamsFile}.template"
if [ ! -f $RamsFileTemplate ]
then
  echo "ERROR: cannot read RAMSIN template file: $RamsFileTemplate"
  echo ""
  echo $Usage
  exit -2
fi

# Get the pbs job name from the qsub script file and see if the job is running.
# Unfortunately, the only way I know of getting the full job name is through
# the "qstat -f job_id" invocation of qstat. Doing less verbose options of qstat
# will truncate the name if longer than 11 or 15 characters. So, do an initial
# qstat to find the all of this users jobs that are in the queue, and check each
# one to see if it matches the full job name.
JobName=$(grep PBS $QsubScript | grep "\-N" | sed 's/.* //')
UserName=$(id -un)
NumJobsRunning=$(
  for JobId in $(qstat -u $UserName | grep $UserName | sed 's/\..*//')
  do
    qstat -f $JobId | grep Job_Name | sed 's/.* //'
  done | grep -c "^${JobName}$"
  )

if [ $NumJobsRunning -gt 0 ]
then
  echo "Job is still running, try again later"
  exit 0
fi

# If we made it here, we are going to attempt a history start.
#
# Determine the file to use for the history start. Use either the last or next
# to last of the header files. The idea is that the RAMS analysis files are
# written before the header file so if a header file exists, the associated
# analysis files are intact. Ideally, you want to use the latest header file,
# but if the job died during the write of that header file, the restart won't
# work. If that's the case, the last header file will not match in size with
# the second to the last header file. In this case the second to last header
# file should be used for the restart.
#    - If there are not at least two header files, then might as well do an
#      initial run again.
#    - If the sizes of the final two header files match, then use the final
#      header file.
#    - If the sizes don't match, use the second to last header file.

# Get the analysis file prefix out of the RAMS file.
FilePref="$(sed 's/[!].*//g' $RamsFile | grep AFILEPREF | sed -e 's/.*=//' -e "s/[', \t]//g")-A-"

# Set positional parameters to the final two header files. If there are < 2 files,
# then bail out. HeadFile1 will be the second to last file, HeadFile2 will be
# the last file.
set -- $(ls ${FilePref}*-head.txt | tail -n 2)
HeadFile1=$1
HeadFile2=$2
if [ "$HeadFile1" == "" ] || [ "$HeadFile2" == "" ]
then
  echo "Not enough header files for a restart. Redo the INITIAL run."
  exit 0
fi

# Get the sizes of the two header files. If sizes match, use header 2.
# If sizes don't match, use header 1.
SizeHF1=$(wc -c $HeadFile1 | sed 's/ .*//')
SizeHF2=$(wc -c $HeadFile2 | sed 's/ .*//')

if [ $SizeHF1 -eq $SizeHF2 ]
then
  RestartFile=$HeadFile2
else
  RestartFile=$HeadFile1
fi

# Check the restart file to see if it matches the end file. If so, then the
# job has completed in which case the restart is not necessary.
if [ "$RestartFile" == "$EndRamsFile" ]
then
  echo "Job has completed, skipping restart."
  exit 0
fi

# Change HFILIN to the new restart file in the RAMS file
# Use "@" for delimiter in the substitue command for sed below since
# RestartFile can contain slashes.
sed "s@<HIST_FILE>@$RestartFile@g" $RamsFileTemplate > ${RamsFile}.temp
if [ $? -ne 0 ]
then
  echo "Error occurred while attempting to change HFILIN in $RamsFile"
  echo "Skipping the restart"
  exit -3
else
  mv ${RamsFile}.temp $RamsFile
fi

# Fire off the history restart
QsubCmd="qsub ./$QsubScript"

echo "Restarting RAMS:"
echo "  HFILIN: $RestartFile"
echo "  Command: $QsubCmd"
echo ""

$QsubCmd
